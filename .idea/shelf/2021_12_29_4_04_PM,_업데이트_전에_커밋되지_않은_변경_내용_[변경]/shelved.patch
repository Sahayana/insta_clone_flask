Index: static/js/main.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\n        //feed 는 메인 화면에 들어갈 post를 받아서 뿌리는 역할입니다\n         function get_feed() {\n            $.ajax({\n                type: 'GET',\n                url: '/api/feed',\n                data: {},\n                success: function (response) {\n                    console.log(response)\n                }\n            })\n\n             //여기다가 포스트 html 을 foreach\n        }
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/static/js/main.js b/static/js/main.js
--- a/static/js/main.js	
+++ b/static/js/main.js	
@@ -1,14 +1,13 @@
-
-        //feed 는 메인 화면에 들어갈 post를 받아서 뿌리는 역할입니다
-         function get_feed() {
-            $.ajax({
-                type: 'GET',
-                url: '/api/feed',
-                data: {},
-                success: function (response) {
-                    console.log(response)
-                }
-            })
+//feed 는 메인 화면에 들어갈 post를 받아서 뿌리는 역할입니다
+function get_feed() {
+    $.ajax({
+        type: 'GET',
+        url: '/api/feed',
+        data: {},
+        success: function (response) {
+            console.log(response)
+        }
+    })
 
-             //여기다가 포스트 html 을 foreach
-        }
\ No newline at end of file
+    //여기다가 포스트 html 을 foreach
+}
\ No newline at end of file
Index: app.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from flask import Flask, render_template, request, jsonify, redirect, url_for\nfrom pymongo import MongoClient\nimport certifi\n\nca = certifi.where()\n\nclient = MongoClient('mongodb+srv://space:space123@cluster0.gpjhq.mongodb.net/Cluster0?retryWrites=true&w=majority',\n                     tlsCAFile=ca)\n\ndb = client.dbSpace\n\napp = Flask(__name__)\n\nSECRET_KEY = '3iI3j63EmUww246bXHUVghUnYkTwQ6lm'\n\n# JWT 패키지를 사용합니다. (설치해야할 패키지 이름: PyJWT)\nimport jwt\n\n# 토큰에 만료시간을 줘야하기 때문에, datetime 모듈도 사용합니다.\nimport datetime\n\n# 회원가입 시엔, 비밀번호를 암호화하여 DB에 저장해두는 게 좋습니다.\n# 그렇지 않으면, 개발자(=나)가 회원들의 비밀번호를 볼 수 있으니까요.^^;\nimport hashlib\n\n\n#################################\n##  HTML을 주는 부분             ##\n#################################\n@app.route('/')\ndef home():\n    # # 현재 이용자의 컴퓨터에 저장된 cookie 에서 mytoken 을 가져옵니다.\n    # token_receive = request.cookies.get('mytoken')\n    # try:\n    #     # 암호화되어있는 token의 값을 우리가 사용할 수 있도록 디코딩(암호화 풀기)해줍니다!\n    #     payload = jwt.decode(token_receive, SECRET_KEY, algorithms=['HS256'])\n    #     user_info = db.user.find_one({\"id\": payload['id']})\n        return render_template('index.html') #, nickname=user_info[\"nick\"]\n    # # 만약 해당 token의 로그인 시간이 만료되었다면, 아래와 같은 코드를 실행합니다.\n    # except jwt.ExpiredSignatureError:\n    #     return redirect(url_for(\"login\", msg=\"로그인 시간이 만료되었습니다.\"))\n    #     # 만약 해당 token이 올바르게 디코딩되지 않는다면, 아래와 같은 코드를 실행합니다.\n    # except jwt.exceptions.DecodeError:\n    #     return redirect(url_for(\"login\", msg=\"로그인 정보가 존재하지 않습니다.\"))\n\n\n@app.route('/login')\ndef login():\n    msg = request.args.get(\"msg\")\n    return render_template('login.html', msg=msg)\n\n\n@app.route('/regist')\ndef register():\n    return render_template('regist.html')\n\n\n@app.route('/profile')\ndef profile():\n    return render_template('profile.html')\n\n\n@app.route('/posting')\ndef posting():\n    return render_template('create_post.html')\n\n\n\n#################################\n##  로그인을 위한 API            ##\n#################################\n\n# [회원가입 API]\n# id, pw, nickname을 받아서, mongoDB에 저장합니다.\n# 저장하기 전에, pw를 sha256 방법(=단방향 암호화. 풀어볼 수 없음)으로 암호화해서 저장합니다.\n@app.route('/api/register', methods=['POST'])\ndef api_register():\n    id_receive = request.form['id_give']\n    pw_receive = request.form['pw_give']\n    nickname_receive = request.form['nickname_give']\n\n    pw_hash = hashlib.sha256(pw_receive.encode('utf-8')).hexdigest()\n\n    db.user.insert_one({'id': id_receive, 'pw': pw_hash, 'nick': nickname_receive})  # 이메일 추가\n\n    return jsonify({'result': 'success'})\n\n\n# [로그인 API]\n# id, pw를 받아서 맞춰보고, 토큰을 만들어 발급합니다.\n@app.route('/api/login', methods=['POST'])\ndef api_login():\n    id_receive = request.form['id_give']\n    pw_receive = request.form['pw_give']\n\n    # 회원가입 때와 같은 방법으로 pw를 암호화합니다.\n    pw_hash = hashlib.sha256(pw_receive.encode('utf-8')).hexdigest()\n\n    # id, 암호화된pw을 가지고 해당 유저를 찾습니다.\n    result = db.user.find_one({'id': id_receive, 'pw': pw_hash})\n\n    # 찾으면 JWT 토큰을 만들어 발급합니다.\n    if result is not None:\n        # JWT 토큰에는, payload와 시크릿키가 필요합니다.\n        # 시크릿키가 있어야 토큰을 디코딩(=암호화 풀기)해서 payload 값을 볼 수 있습니다.\n        # 아래에선 id와 exp를 담았습니다. 즉, JWT 토큰을 풀면 유저ID 값을 알 수 있습니다.\n        # exp에는 만료시간을 넣어줍니다. 만료시간이 지나면, 시크릿키로 토큰을 풀 때 만료되었다고 에러가 납니다.\n        payload = {\n            'id': id_receive,\n            'exp': datetime.datetime.utcnow() + datetime.timedelta(seconds=5)\n        }\n        token = jwt.encode(payload, SECRET_KEY, algorithm='HS256').decode('utf-8')\n\n        # token을 줍니다.\n        return jsonify({'result': 'success', 'token': token})\n    # 찾지 못하면\n    else:\n        return jsonify({'result': 'fail', 'msg': '아이디/비밀번호가 일치하지 않습니다.'})\n\n\n\n# [유저 정보 확인 API]\n# 로그인된 유저만 call 할 수 있는 API입니다.\n# 유효한 토큰을 줘야 올바른 결과를 얻어갈 수 있습니다.\n# (그렇지 않으면 남의 장바구니라든가, 정보를 누구나 볼 수 있겠죠?)\n@app.route('/api/nick', methods=['GET'])\ndef api_valid():\n    token_receive = request.cookies.get('mytoken')\n\n    # try / catch 문?\n    # try 아래를 실행했다가, 에러가 있으면 except 구분으로 가란 얘기입니다.\n\n    try:\n        # token을 시크릿키로 디코딩합니다.\n        # 보실 수 있도록 payload를 print 해두었습니다. 우리가 로그인 시 넣은 그 payload와 같은 것이 나옵니다.\n        payload = jwt.decode(token_receive, SECRET_KEY, algorithms=['HS256'])\n        print(payload)\n\n        # payload 안에 id가 들어있습니다. 이 id로 유저정보를 찾습니다.\n        # 여기에선 그 예로 닉네임을 보내주겠습니다.\n        userinfo = db.user.find_one({'id': payload['id']}, {'_id': False})\n        return jsonify({'result': 'success', 'nickname': userinfo['nick']})\n    except jwt.ExpiredSignatureError:\n        # 위를 실행했는데 만료시간이 지났으면 에러가 납니다.\n        return jsonify({'result': 'fail', 'msg': '로그인 시간이 만료되었습니다.'})\n    except jwt.exceptions.DecodeError:\n        return jsonify({'result': 'fail', 'msg': '로그인 정보가 존재하지 않습니다.'})\n\n\n\n    #################################\n    ##  메인화면을 위한 API            ##\n    #################################\n@app.route('/api/feed', methods=['GET'])\ndef api_feed():\n    all_feed = list(db.posts.find({}, {'_id': 0}))\n    return jsonify(all_feed)\n\n@app.route('/api/posting', methods=['POST'])\ndef create_post():\n    url_receive = request.form['url_give']\n    title_receive = request.form['title_give']\n    content_receive = request.form['content_give']\n    doc = {\n        'title': title_receive,\n        'photo': url_receive,\n        'content': content_receive,\n        'username': '123',\n    }\n    db.posts.insert_one(doc)\n    return jsonify({'msg':\"저장 완료\"})\n\n    #################################\n    ##  프로필화면을 위한 API            ##\n    #################################\n\n# /api/profile?username=username\n@app.route('/profile', methods=['GET'])\ndef api_profile():\n    username = request.args.get('username')\n    return jsonify()\n\n\nif __name__ == '__main__':\n    app.run('0.0.0.0', port=5001, debug=True)\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app.py b/app.py
--- a/app.py	
+++ b/app.py	
@@ -154,7 +154,7 @@
 @app.route('/api/feed', methods=['GET'])
 def api_feed():
     all_feed = list(db.posts.find({}, {'_id': 0}))
-    return jsonify(all_feed)
+    return jsonify({'msg': all_feed})
 
 @app.route('/api/posting', methods=['POST'])
 def create_post():
